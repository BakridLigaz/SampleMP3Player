/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;



import com.jtattoo.plaf.hifi.HiFiLookAndFeel;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.time.LocalTime;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.nimbus.NimbusLookAndFeel;
import javazoom.jlgui.basicplayer.BasicController;
import javazoom.jlgui.basicplayer.BasicPlayer;
import javazoom.jlgui.basicplayer.BasicPlayerEvent;
import javazoom.jlgui.basicplayer.BasicPlayerException;
import javazoom.jlgui.basicplayer.BasicPlayerListener;
import objects.MP3;
import objects.MP3Player;
import objects.MoveDisplay;
import utils.FileUtilites;
import utils.SkinUtilites;

/**
 *
 * @author Admin
 */
public class Main extends javax.swing.JFrame implements BasicPlayerListener{
    private final String FORMAT_MP3 = "mp3";
    private final String FORMAT_PLAYLIST = "pls";
    private final String FORMAT_PLAYLIST_SAVE = "."+FORMAT_PLAYLIST;
    private final String DIALOG_MP3 = "файлы mp3";
    private final String DIALOG_PLAYLIST = "файлы pls";
    private final String DIALOG_EMPTY_PLAYLIST = "Плейлист пуст!!!";
    private final String EMPTY_STRING = "";
    private final String START_SEARCH = "Введите название композиции";
    private final String FILE_EXIST = "Файл с таким именем существует, перезаписать его?";
    private final String OPEN_FILE = "Откройте файл или плейлист"; 
    private final FileNameExtensionFilter songFilter = new FileNameExtensionFilter(DIALOG_MP3,FORMAT_MP3);
    private final FileNameExtensionFilter playlistFilter = new FileNameExtensionFilter(DIALOG_PLAYLIST,FORMAT_PLAYLIST);
    private final FileNameExtensionFilter savePlaylistFilter = new FileNameExtensionFilter(DIALOG_PLAYLIST,FORMAT_PLAYLIST);
    private DefaultListModel mp3ListModel = new DefaultListModel();
    private MP3Player player = new MP3Player();
    private int lastVolume;
    private MoveDisplay display;
    private int byteLenght;
    private long secondsAmount;
    private boolean moveJump=false;
    private long duration;
    private int lastPosition;
    private boolean moveAuto=false;
    private int posValue;
    private double currByte;
    private Properties pr = new Properties(); 


    /**
     * Creates new form Main
     */
    public Main() {
        initProp();
        initComponents();
        initDisplay();
        player.addListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        fileChooserSong = new javax.swing.JFileChooser();
        menuEject = new javax.swing.JPopupMenu();
        itemOpenSong = new javax.swing.JMenuItem();
        itemOpenPlaylist = new javax.swing.JMenuItem();
        panelMain = new javax.swing.JPanel();
        panelControl = new javax.swing.JPanel();
        panelPlayback = new javax.swing.JPanel();
        btnPrevious = new javax.swing.JButton();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnStop = new javax.swing.JButton();
        btnNext = new javax.swing.JButton();
        panelEject = new javax.swing.JPanel();
        btnEject = new javax.swing.JButton();
        panelPlaylistController = new javax.swing.JPanel();
        btnDelete = new javax.swing.JButton();
        btnClearPlaylist = new javax.swing.JButton();
        panelSlider = new javax.swing.JPanel();
        panelVolume = new javax.swing.JPanel();
        labelVolume = new javax.swing.JLabel();
        labelVolumeControl = new javax.swing.JLabel();
        TBtnMute = new javax.swing.JToggleButton();
        sliderVolume = new javax.swing.JSlider();
        panelSlidePlayback = new javax.swing.JPanel();
        sliderPlay = new javax.swing.JSlider();
        panelDisplay = new javax.swing.JPanel();
        panelSearch = new javax.swing.JPanel();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        txtFieldSearch = new javax.swing.JTextField();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        btnStartSearch = new javax.swing.JButton();
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        panelPlaylist = new javax.swing.JPanel();
        panePlaylist = new javax.swing.JScrollPane();
        listPlaylist = new javax.swing.JList<>();
        StringMenu = new javax.swing.JMenuBar();
        menuMain = new javax.swing.JMenu();
        itemOpenSong1 = new javax.swing.JMenuItem();
        itemOpenPlaylist1 = new javax.swing.JMenuItem();
        itemSavePlaylist = new javax.swing.JMenuItem();
        itemExit = new javax.swing.JMenuItem();
        menuSkin = new javax.swing.JMenu();
        itemSkinOne = new javax.swing.JMenuItem();
        itemSkinTwo = new javax.swing.JMenuItem();

        fileChooserSong.setAcceptAllFileFilterUsed(false);
        fileChooserSong.setCurrentDirectory(new java.io.File("E:\\Oleg\\Music"));
        fileChooserSong.setDialogTitle("");
        fileChooserSong.setMultiSelectionEnabled(true);

        itemOpenSong.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Music_Note.png"))); // NOI18N
        itemOpenSong.setText("Открыть Файл");
        itemOpenSong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenSongActionPerformed(evt);
            }
        });
        menuEject.add(itemOpenSong);

        itemOpenPlaylist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Aqua Smooth Folder Music.png"))); // NOI18N
        itemOpenPlaylist.setText("Открыть Плейлист");
        itemOpenPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenPlaylistActionPerformed(evt);
            }
        });
        menuEject.add(itemOpenPlaylist);

        menuEject.add(itemOpenSong);
        menuEject.add(itemOpenPlaylist);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SamPComp");
        setIconImage(new javax.swing.ImageIcon(getClass().getResource("/icons/player.png")).getImage());
        setLocationByPlatform(true);
        setMaximumSize(new java.awt.Dimension(440, 495));
        setMinimumSize(new java.awt.Dimension(440, 495));
        setName("frameMain"); // NOI18N
        setPreferredSize(new java.awt.Dimension(440, 495));
        setResizable(false);

        panelMain.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        panelMain.setLayout(new java.awt.BorderLayout());

        panelControl.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        panelControl.setPreferredSize(new java.awt.Dimension(388, 50));
        panelControl.setLayout(new javax.swing.BoxLayout(panelControl, javax.swing.BoxLayout.LINE_AXIS));

        panelPlayback.setLayout(new javax.swing.BoxLayout(panelPlayback, javax.swing.BoxLayout.LINE_AXIS));

        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_rew.png"))); // NOI18N
        btnPrevious.setToolTipText("Предыдущая композиция");
        btnPrevious.setMaximumSize(new java.awt.Dimension(40, 40));
        btnPrevious.setMinimumSize(new java.awt.Dimension(40, 40));
        btnPrevious.setModel(btnPrevious.getModel());
        btnPrevious.setPreferredSize(new java.awt.Dimension(40, 40));
        btnPrevious.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousActionPerformed(evt);
            }
        });
        panelPlayback.add(btnPrevious);

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_play.png"))); // NOI18N
        btnPlay.setToolTipText("Воспроизвести");
        btnPlay.setMaximumSize(new java.awt.Dimension(40, 40));
        btnPlay.setMinimumSize(new java.awt.Dimension(40, 40));
        btnPlay.setPreferredSize(new java.awt.Dimension(40, 40));
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        panelPlayback.add(btnPlay);

        btnPause.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_pause.png"))); // NOI18N
        btnPause.setToolTipText("Пауза");
        btnPause.setMaximumSize(new java.awt.Dimension(40, 40));
        btnPause.setMinimumSize(new java.awt.Dimension(40, 40));
        btnPause.setPreferredSize(new java.awt.Dimension(40, 40));
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });
        panelPlayback.add(btnPause);

        btnStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_stop.png"))); // NOI18N
        btnStop.setToolTipText("Стоп");
        btnStop.setMaximumSize(new java.awt.Dimension(40, 40));
        btnStop.setMinimumSize(new java.awt.Dimension(40, 40));
        btnStop.setPreferredSize(new java.awt.Dimension(40, 40));
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        panelPlayback.add(btnStop);

        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_fwd.png"))); // NOI18N
        btnNext.setToolTipText("Следующая композиция");
        btnNext.setMaximumSize(new java.awt.Dimension(40, 40));
        btnNext.setMinimumSize(new java.awt.Dimension(40, 40));
        btnNext.setPreferredSize(new java.awt.Dimension(40, 40));
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });
        panelPlayback.add(btnNext);

        panelControl.add(panelPlayback);

        btnEject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/player_eject.png"))); // NOI18N
        btnEject.setToolTipText("Открыть файл или плейлист");
        btnEject.setMaximumSize(new java.awt.Dimension(40, 40));
        btnEject.setMinimumSize(new java.awt.Dimension(40, 40));
        btnEject.setPreferredSize(new java.awt.Dimension(40, 40));

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, menuMain, org.jdesktop.beansbinding.ELProperty.create("${selected}"), btnEject, org.jdesktop.beansbinding.BeanProperty.create("selected"));
        bindingGroup.addBinding(binding);

        btnEject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjectActionPerformed(evt);
            }
        });
        panelEject.add(btnEject);

        panelControl.add(panelEject);

        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete.png"))); // NOI18N
        btnDelete.setToolTipText("Удалить из плейлиста");
        btnDelete.setMaximumSize(new java.awt.Dimension(40, 40));
        btnDelete.setMinimumSize(new java.awt.Dimension(40, 40));
        btnDelete.setPreferredSize(new java.awt.Dimension(40, 40));
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });
        panelPlaylistController.add(btnDelete);

        btnClearPlaylist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/delete-notes.png"))); // NOI18N
        btnClearPlaylist.setToolTipText("Очистить плейлист");
        btnClearPlaylist.setMaximumSize(new java.awt.Dimension(40, 40));
        btnClearPlaylist.setMinimumSize(new java.awt.Dimension(40, 40));
        btnClearPlaylist.setPreferredSize(new java.awt.Dimension(40, 40));
        btnClearPlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearPlaylistActionPerformed(evt);
            }
        });
        panelPlaylistController.add(btnClearPlaylist);

        panelControl.add(panelPlaylistController);

        panelMain.add(panelControl, java.awt.BorderLayout.CENTER);

        panelSlider.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));

        panelVolume.setMaximumSize(new java.awt.Dimension(200, 50));
        panelVolume.setPreferredSize(new java.awt.Dimension(200, 50));

        labelVolume.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        labelVolume.setText("Громкость");
        labelVolume.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, panelVolume, org.jdesktop.beansbinding.ObjectProperty.create(), labelVolume, org.jdesktop.beansbinding.BeanProperty.create("labelFor"));
        bindingGroup.addBinding(binding);

        panelVolume.add(labelVolume);

        labelVolumeControl.setPreferredSize(new java.awt.Dimension(25, 20));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, sliderVolume, org.jdesktop.beansbinding.ELProperty.create("${value}"), labelVolumeControl, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        panelVolume.add(labelVolumeControl);

        TBtnMute.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/speaker_sound.png"))); // NOI18N
        TBtnMute.setToolTipText("Выключить звук");
        TBtnMute.setMaximumSize(new java.awt.Dimension(25, 25));
        TBtnMute.setMinimumSize(new java.awt.Dimension(25, 25));
        TBtnMute.setPreferredSize(new java.awt.Dimension(25, 25));
        TBtnMute.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/no_sound.png"))); // NOI18N
        TBtnMute.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                TBtnMuteItemStateChanged(evt);
            }
        });
        panelVolume.add(TBtnMute);

        sliderVolume.setValue(Integer.valueOf(pr.getProperty("volume")));
        sliderVolume.setMaximumSize(new java.awt.Dimension(50, 21));
        sliderVolume.setMinimumSize(new java.awt.Dimension(50, 21));
        sliderVolume.setPreferredSize(new java.awt.Dimension(50, 21));
        sliderVolume.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderVolumeStateChanged(evt);
            }
        });
        panelVolume.add(sliderVolume);

        panelSlidePlayback.setToolTipText("Ползунок воспроизведения");

        sliderPlay.setBackground(new java.awt.Color(204, 204, 204));
        sliderPlay.setMaximum(1000);
        sliderPlay.setValue(0);
        sliderPlay.setMaximumSize(new java.awt.Dimension(350, 21));
        sliderPlay.setMinimumSize(new java.awt.Dimension(350, 21));
        sliderPlay.setPreferredSize(new java.awt.Dimension(350, 21));
        sliderPlay.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderPlayStateChanged(evt);
            }
        });
        sliderPlay.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                sliderPlayMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelSlidePlaybackLayout = new javax.swing.GroupLayout(panelSlidePlayback);
        panelSlidePlayback.setLayout(panelSlidePlaybackLayout);
        panelSlidePlaybackLayout.setHorizontalGroup(
            panelSlidePlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSlidePlaybackLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(sliderPlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        panelSlidePlaybackLayout.setVerticalGroup(
            panelSlidePlaybackLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSlidePlaybackLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(sliderPlay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelDisplay.setBackground(new java.awt.Color(204, 204, 204));
        panelDisplay.setBorder(new javax.swing.border.MatteBorder(null));
        panelDisplay.setMaximumSize(new java.awt.Dimension(150, 70));
        panelDisplay.setMinimumSize(new java.awt.Dimension(150, 70));
        panelDisplay.setPreferredSize(new java.awt.Dimension(150, 70));
        panelDisplay.setLayout(new javax.swing.BoxLayout(panelDisplay, javax.swing.BoxLayout.LINE_AXIS));

        javax.swing.GroupLayout panelSliderLayout = new javax.swing.GroupLayout(panelSlider);
        panelSlider.setLayout(panelSliderLayout);
        panelSliderLayout.setHorizontalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSliderLayout.createSequentialGroup()
                .addGroup(panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSliderLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(panelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(panelVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelSliderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelSlidePlayback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(136, 136, 136))
        );
        panelSliderLayout.setVerticalGroup(
            panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSliderLayout.createSequentialGroup()
                .addGroup(panelSliderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSliderLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(panelDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(panelSlidePlayback, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        panelMain.add(panelSlider, java.awt.BorderLayout.NORTH);

        panelSearch.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        panelSearch.setMaximumSize(new java.awt.Dimension(432, 45));
        panelSearch.setMinimumSize(new java.awt.Dimension(432, 45));
        panelSearch.setPreferredSize(new java.awt.Dimension(432, 45));
        panelSearch.setLayout(new javax.swing.BoxLayout(panelSearch, javax.swing.BoxLayout.LINE_AXIS));
        panelSearch.add(filler2);

        txtFieldSearch.setBackground(new java.awt.Color(153, 153, 153));
        txtFieldSearch.setFont(new java.awt.Font("sansserif", 2, 12)); // NOI18N
        txtFieldSearch.setForeground(new java.awt.Color(255, 255, 255));
        txtFieldSearch.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        txtFieldSearch.setText(START_SEARCH);
        txtFieldSearch.setToolTipText("Строка поиска");
        txtFieldSearch.setMaximumSize(new java.awt.Dimension(300, 30));
        txtFieldSearch.setMinimumSize(new java.awt.Dimension(300, 30));
        txtFieldSearch.setPreferredSize(new java.awt.Dimension(300, 30));
        txtFieldSearch.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtFieldSearchFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtFieldSearchFocusLost(evt);
            }
        });
        txtFieldSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtFieldSearchKeyPressed(evt);
            }
        });
        panelSearch.add(txtFieldSearch);
        panelSearch.add(filler1);

        btnStartSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/search.png"))); // NOI18N
        btnStartSearch.setToolTipText("Начать поиск");
        btnStartSearch.setMaximumSize(new java.awt.Dimension(50, 35));
        btnStartSearch.setMinimumSize(new java.awt.Dimension(50, 35));
        btnStartSearch.setPreferredSize(new java.awt.Dimension(50, 35));
        btnStartSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartSearchActionPerformed(evt);
            }
        });
        panelSearch.add(btnStartSearch);
        panelSearch.add(filler3);

        panelMain.add(panelSearch, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(panelMain, java.awt.BorderLayout.NORTH);

        panelPlaylist.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(153, 153, 153), 1, true));
        panelPlaylist.setMaximumSize(new java.awt.Dimension(440, 300));
        panelPlaylist.setMinimumSize(new java.awt.Dimension(430, 270));
        panelPlaylist.setPreferredSize(new java.awt.Dimension(440, 270));
        panelPlaylist.setLayout(new javax.swing.BoxLayout(panelPlaylist, javax.swing.BoxLayout.LINE_AXIS));

        panePlaylist.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 153)), "Плейлист", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Bookman Old Style", 1, 14), new java.awt.Color(0, 0, 0))); // NOI18N
        panePlaylist.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        listPlaylist.setBackground(new java.awt.Color(153, 153, 153));
        listPlaylist.setFont(new java.awt.Font("Franklin Gothic Medium", 0, 12)); // NOI18N
        listPlaylist.setModel(mp3ListModel);
        listPlaylist.setToolTipText("Плейлист");
        listPlaylist.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listPlaylistMouseClicked(evt);
            }
        });
        listPlaylist.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                listPlaylistKeyPressed(evt);
            }
        });
        panePlaylist.setViewportView(listPlaylist);

        panelPlaylist.add(panePlaylist);

        getContentPane().add(panelPlaylist, java.awt.BorderLayout.PAGE_END);

        StringMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        StringMenu.setFocusable(false);

        menuMain.setText("Основное меню");

        itemOpenSong1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Music_Note.png"))); // NOI18N
        itemOpenSong1.setText("Открыть Файл");
        itemOpenSong1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenSong1ActionPerformed(evt);
            }
        });
        menuMain.add(itemOpenSong1);

        itemOpenPlaylist1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/Aqua Smooth Folder Music.png"))); // NOI18N
        itemOpenPlaylist1.setText("Открыть Плейлист");
        itemOpenPlaylist1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenPlaylist1ActionPerformed(evt);
            }
        });
        menuMain.add(itemOpenPlaylist1);

        itemSavePlaylist.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/save.png"))); // NOI18N
        itemSavePlaylist.setText("Сохранить текущий Плейлист");
        itemSavePlaylist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSavePlaylistActionPerformed(evt);
            }
        });
        menuMain.add(itemSavePlaylist);

        itemExit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/logout.png"))); // NOI18N
        itemExit.setText("Выйти");
        itemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExitActionPerformed(evt);
            }
        });
        menuMain.add(itemExit);

        StringMenu.add(menuMain);

        menuSkin.setText("Внешний вид");

        itemSkinOne.setText("Скин 1");
        itemSkinOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSkinOneActionPerformed(evt);
            }
        });
        menuSkin.add(itemSkinOne);

        itemSkinTwo.setText("Скин 2");
        itemSkinTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSkinTwoActionPerformed(evt);
            }
        });
        menuSkin.add(itemSkinTwo);

        StringMenu.add(menuSkin);

        setJMenuBar(StringMenu);

        bindingGroup.bind();

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    private void itemSkinOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSkinOneActionPerformed
        SkinUtilites.changeSkin(this,this.fileChooserSong,menuSkin,new NimbusLookAndFeel());
    }//GEN-LAST:event_itemSkinOneActionPerformed

    private void itemSkinTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSkinTwoActionPerformed
        SkinUtilites.changeSkin(this, this.fileChooserSong, menuSkin, new HiFiLookAndFeel());
    }//GEN-LAST:event_itemSkinTwoActionPerformed

    private void btnEjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjectActionPerformed
        menuEject.show(btnEject,btnEject.getX(),btnEject.getY());
    }//GEN-LAST:event_btnEjectActionPerformed

    private void itemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExitActionPerformed
        System.exit(DO_NOTHING_ON_CLOSE);
    }//GEN-LAST:event_itemExitActionPerformed

    private void itemOpenSongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenSongActionPerformed
        this.openSong();
    }//GEN-LAST:event_itemOpenSongActionPerformed

    private void itemOpenPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenPlaylistActionPerformed
        this.openPlaylist();
    }//GEN-LAST:event_itemOpenPlaylistActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
    this.deleteSongs();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void itemSavePlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSavePlaylistActionPerformed
        this.savePlaylist();
    }//GEN-LAST:event_itemSavePlaylistActionPerformed

    private void itemOpenSong1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenSong1ActionPerformed
        this.openSong();
    }//GEN-LAST:event_itemOpenSong1ActionPerformed

    private void itemOpenPlaylist1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenPlaylist1ActionPerformed
        this.openPlaylist();
    }//GEN-LAST:event_itemOpenPlaylist1ActionPerformed

    private void txtFieldSearchFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldSearchFocusLost
        txtFieldSearch.setForeground(Color.LIGHT_GRAY);
        if(txtFieldSearch.getText().equals(EMPTY_STRING)){
            txtFieldSearch.setText(START_SEARCH);
        }
                
    }//GEN-LAST:event_txtFieldSearchFocusLost

    private void txtFieldSearchFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtFieldSearchFocusGained
        txtFieldSearch.setForeground(Color.BLACK);
        txtFieldSearch.setText(EMPTY_STRING);
    }//GEN-LAST:event_txtFieldSearchFocusGained

    private void btnStartSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartSearchActionPerformed
        searchSong();
    }//GEN-LAST:event_btnStartSearchActionPerformed

    private void btnClearPlaylistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearPlaylistActionPerformed
       clearPlaylist();
    }//GEN-LAST:event_btnClearPlaylistActionPerformed

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        play();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        player.stop();
    }//GEN-LAST:event_btnStopActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
        player.pause();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void listPlaylistMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listPlaylistMouseClicked
        if(evt.getClickCount()==2){
            play();
        }
    }//GEN-LAST:event_listPlaylistMouseClicked

    private void txtFieldSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFieldSearchKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            searchSong();
        }
    }//GEN-LAST:event_txtFieldSearchKeyPressed

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        next();
    }//GEN-LAST:event_btnNextActionPerformed

    private void btnPreviousActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousActionPerformed
        previous();
    }//GEN-LAST:event_btnPreviousActionPerformed

    private void listPlaylistKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_listPlaylistKeyPressed
        if(evt.getKeyCode()==KeyEvent.VK_ENTER){
            play();
        }
    }//GEN-LAST:event_listPlaylistKeyPressed

    private void sliderVolumeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderVolumeStateChanged
        this.isSelectMute();
        player.setVolume(sliderVolume.getValue(),sliderVolume.getMaximum());
        if(sliderVolume.getValueIsAdjusting()==false){
            FileOutputStream outputStream = null;
            try {
                pr.setProperty("volume",String.valueOf(sliderVolume.getValue()));
                outputStream = new FileOutputStream("src/gui/config.properties");
                pr.store(outputStream, "new volume");
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    outputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_sliderVolumeStateChanged

    private void TBtnMuteItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_TBtnMuteItemStateChanged
        if(evt.getStateChange()==ItemEvent.SELECTED){
            mute();
        }else remute();
    }//GEN-LAST:event_TBtnMuteItemStateChanged

    private void sliderPlayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderPlayStateChanged

        if(sliderPlay.getValueIsAdjusting()==false){ 
                if(moveAuto==true){
                    moveAuto=false;
                    currByte = sliderPlay.getValue()*1.0/1000;
                    seek(currByte);
                }
            }else   {
                moveAuto=true;
                moveJump=true;
            }
            if(moveJump==true&&player.getStatus()!=BasicPlayer.OPENED){
                if(lastPosition<sliderPlay.getValue()&player.getStatus()!=BasicPlayer.UNKNOWN){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/frw.png")));
                }else if(lastPosition>sliderPlay.getValue()&&player.getStatus()!=BasicPlayer.UNKNOWN){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/prev.png")));
                }
            }
        
    }//GEN-LAST:event_sliderPlayStateChanged

    private void sliderPlayMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sliderPlayMousePressed
        moveJump=true;
        setLastPosition();
    }//GEN-LAST:event_sliderPlayMousePressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    JFrame.setDefaultLookAndFeelDecorated(true);
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Main().setVisible(true);                       
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar StringMenu;
    private javax.swing.JToggleButton TBtnMute;
    private javax.swing.JButton btnClearPlaylist;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEject;
    private javax.swing.JButton btnNext;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnPrevious;
    private javax.swing.JButton btnStartSearch;
    private javax.swing.JButton btnStop;
    private javax.swing.JFileChooser fileChooserSong;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemOpenPlaylist;
    private javax.swing.JMenuItem itemOpenPlaylist1;
    private javax.swing.JMenuItem itemOpenSong;
    private javax.swing.JMenuItem itemOpenSong1;
    private javax.swing.JMenuItem itemSavePlaylist;
    private javax.swing.JMenuItem itemSkinOne;
    private javax.swing.JMenuItem itemSkinTwo;
    private javax.swing.JLabel labelVolume;
    private javax.swing.JLabel labelVolumeControl;
    private javax.swing.JList<String> listPlaylist;
    private javax.swing.JPopupMenu menuEject;
    private javax.swing.JMenu menuMain;
    private javax.swing.JMenu menuSkin;
    private javax.swing.JScrollPane panePlaylist;
    private javax.swing.JPanel panelControl;
    private javax.swing.JPanel panelDisplay;
    private javax.swing.JPanel panelEject;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelPlayback;
    private javax.swing.JPanel panelPlaylist;
    private javax.swing.JPanel panelPlaylistController;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JPanel panelSlidePlayback;
    private javax.swing.JPanel panelSlider;
    private javax.swing.JPanel panelVolume;
    private javax.swing.JSlider sliderPlay;
    private javax.swing.JSlider sliderVolume;
    private javax.swing.JTextField txtFieldSearch;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    private void openSong(){
        fileChooserSong.setMultiSelectionEnabled(true);
        FileUtilites.addFileFilter(fileChooserSong, songFilter);
        int resultAction = fileChooserSong.showOpenDialog(this);
        if(resultAction==JFileChooser.APPROVE_OPTION){
            File [] selectedFiles = fileChooserSong.getSelectedFiles();
            for (File selectedFile : selectedFiles) {               
                MP3 song = new MP3(selectedFile.getName(),selectedFile.getPath());
                if(this.insectionUniq(song)){
                    if(song!=null){
                        mp3ListModel.addElement(song);
                    }
                }
            }
        }
    }
    
    private void openPlaylist(){
        fileChooserSong.setMultiSelectionEnabled(false);
        FileUtilites.addFileFilter(fileChooserSong,playlistFilter);
        int result = fileChooserSong.showOpenDialog(itemOpenPlaylist);     
        if(result==JFileChooser.APPROVE_OPTION){
          this.mp3ListModel = (DefaultListModel) FileUtilites.desirialize(fileChooserSong.getSelectedFile().getPath());
          listPlaylist.setModel(mp3ListModel);
        }
    }
    
    private void deleteSongs(){
        ArrayList <MP3> delList = new ArrayList<MP3>();
        int [] IndDelFiles = listPlaylist.getSelectedIndices();
        if(IndDelFiles.length>0){
        for (int IndDelFile : IndDelFiles) {
            if(mp3ListModel.getElementAt(IndDelFile) instanceof MP3){
            delList.add((MP3)mp3ListModel.getElementAt(IndDelFile));}
        }
            for (Iterator<MP3> it = delList.iterator(); it.hasNext();) {
                MP3 delFile = it.next();
                if(delFile.getPath()!=player.getPathCurrentSong()){
                    mp3ListModel.removeElement(delFile);
                }
            }
        }
    }

    private void savePlaylist() {
        if(mp3ListModel.getSize()==0){
            JOptionPane.showMessageDialog(this, DIALOG_EMPTY_PLAYLIST);
            return;
        }
            FileUtilites.addFileFilter(fileChooserSong,playlistFilter);
        int result =fileChooserSong.showSaveDialog(this);
        if(result==JFileChooser.APPROVE_OPTION){
            File outFile = fileChooserSong.getSelectedFile();
            if(!outFile.exists()){
                FileUtilites.serilalize(mp3ListModel, outFile.getPath());
            }else if(outFile.exists()){
                    int r = JOptionPane.showConfirmDialog(this, FILE_EXIST);
                    if(r==JOptionPane.CANCEL_OPTION||r==JOptionPane.NO_OPTION){
                        return;
                    }else if(r==JOptionPane.YES_OPTION){
                        FileUtilites.serilalize(mp3ListModel, outFile.getPath());
                    }
            }
            
        }
        
    }
    
    private void searchSong(){
        String objectSearch = txtFieldSearch.getText();
        List<Integer> searchMatches = new ArrayList<>();
        if(objectSearch.equals(EMPTY_STRING)||objectSearch.equals(START_SEARCH)){
            return;
        }
        for (int i = 0; i <mp3ListModel.getSize(); i++) {
            MP3 current = (MP3) mp3ListModel.getElementAt(i);
            if(current.getName().toLowerCase().contains(objectSearch.toLowerCase())){
                searchMatches.add(i);
            }
        }       
        if(searchMatches.size()==0){
            JOptionPane.showMessageDialog(this, "Поиск не дал результатов");
            txtFieldSearch.requestFocus();
        }
        int [] arraySearch = new int [searchMatches.size()];
        for (int i = 0; i <searchMatches.size(); i++) {
            arraySearch[i]= searchMatches.get(i).intValue();
        }
        listPlaylist.setSelectedIndices(arraySearch);
    }

    private boolean insectionUniq(MP3 song) {
        for (int i = 0; i < mp3ListModel.size(); i++) {
            MP3 get = (MP3) mp3ListModel.get(i);
            if(get.getPath().equals(song.getPath())){
                return false;
            }
        }
        return true;
    }

    private void clearPlaylist() {
        mp3ListModel = new DefaultListModel();
        player.stop();
        listPlaylist.setModel(mp3ListModel);
    }

    private void mute() {
        lastVolume = sliderVolume.getValue();
        sliderVolume.setValue(0);
    }

    private void remute() {
        if(lastVolume!=0){
            sliderVolume.setValue(lastVolume); 
        }
    }

    private void isSelectMute() {
        if(sliderVolume.getValue()==0){
            TBtnMute.setSelected(true);
        }else if(sliderVolume.getValue()>0){
            TBtnMute.setSelected(false);
        }
    }

    private synchronized void startDisplay(String name) {  
        display.setText(name);
        display.startDraw();
    }
    
    private void initDisplay(){
        display= new MoveDisplay(panelDisplay.getWidth());
        panelDisplay.add(display);
        startDisplay(OPEN_FILE);
    }
    
    private void play(){
          int selectIndex;
        MP3 file=null;
        if(mp3ListModel.isEmpty()){
              return;      
        }
        if(listPlaylist.getSelectedIndex()>0){
            selectIndex = listPlaylist.getSelectedIndex();
            file = (MP3) mp3ListModel.getElementAt(selectIndex);          
        }else {
            file = (MP3)mp3ListModel.getElementAt(0);
            listPlaylist.setSelectedIndex(0);
        }  
        try{
            player.play(file.getPath());
            player.setVolume(sliderVolume.getValue(),sliderVolume.getMaximum());
            startDisplay(file.getName());
        }catch(IOException ex){
            next();
            play();
        }catch (BasicPlayerException ex) {
            next();
            play();
        }
        
    }   
        
    private void next(){
        if(listPlaylist.getSelectedIndex()!=mp3ListModel.getSize()-1){
            listPlaylist.setSelectedIndex(listPlaylist.getSelectedIndex()+1);
            if(player.getStatus()==BasicPlayer.PLAYING){
                play();
            }
        }else {
            listPlaylist.setSelectedIndex(0);
            if(player.getStatus()==BasicPlayer.PLAYING){
                play();
            }
        }    
    }
    
    private void previous(){
        if(listPlaylist.getSelectedIndex()!=0){
            listPlaylist.setSelectedIndex(listPlaylist.getSelectedIndex()-1);
            if(player.getStatus()==BasicPlayer.PLAYING){
                play();
            }
        }else {
            listPlaylist.setSelectedIndex(mp3ListModel.getSize()-1);
            if(player.getStatus()==BasicPlayer.PLAYING){
                play();
            }
        }   
    }
    
    private synchronized String timeToString(long time){
        int hour = (int) (time/3600);
        int min = (int) time/60;
        int sec = (int) time%60;
        String s = String.valueOf(LocalTime.of(hour, min, sec));
        return s;
    }
    
    private void setLastPosition(){
        lastPosition = sliderPlay.getValue();
    }
    
    
           
            @Override
            public void opened(Object o, Map map) {
                   duration = (long)Math.round((((Long)map.get("duration")).longValue())/1000000);
                   display.setDuration(timeToString(duration));
                   byteLenght = (int)Math.round(((Integer)map.get("mp3.length.bytes")).intValue());
            }

            @Override
            public void progress(int bytesread, long l, byte[] bytes, Map map) {
                   currByte = bytesread;
                   float progress = -1.0f;
                   if((bytesread>0)&&(duration>0)){
                       progress = bytesread*1.0f/byteLenght*1.0f;
                   }
                   secondsAmount = (long)(duration*progress);
                   if(duration!=0){
                       if(moveJump==false){
                           posValue= (int)Math.round(secondsAmount*1000/duration);
                           sliderPlay.setValue(posValue);
                           display.setCurrentTime(timeToString(secondsAmount));
                       }
                   }
            }

            @Override
            public void stateUpdated(BasicPlayerEvent bpe) {
                if(bpe.getCode()==BasicPlayerEvent.PLAYING){
                    moveJump =false;
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/play.png")));
                }else if(bpe.getCode()==BasicPlayerEvent.OPENED){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/stop.png")));
                }else if(bpe.getCode()==BasicPlayerEvent.STOPPED){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/stop.png")));
                }else if(bpe.getCode()==BasicPlayerEvent.UNKNOWN){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/stop.png")));
                }else if(bpe.getCode()==BasicPlayerEvent.PAUSED){
                    display.setStatus(new ImageIcon(getClass().getResource("/icons/digit/pause.png")));
                }else  if(bpe.getCode()==BasicPlayerEvent.SEEKING){
                    moveJump =true;
                }
                if(bpe.getCode()==BasicPlayerEvent.EOM){
                    next();
                    play();
                }
            }

            @Override
            public void setController(BasicController bc) {

            }

    private void seek(double bytes) {
        long skipBytes = (long)Math.round(((Integer)byteLenght).intValue()*bytes);
        player.jump(skipBytes);
        player.setVolume(sliderVolume.getValue(),sliderVolume.getMaximum());
    }
    
    private void initProp(){
       
        try {
            pr.load(Main.class.getResourceAsStream("config.properties"));
        } catch (IOException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    

}
